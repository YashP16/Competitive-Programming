 function abs() --> cmath Library

 // Be careful while copy and paste (change the variables)
 
 tolower() -> works character wise
 
 replace( s.begin(), s.end(), ' ', '~' ); --> algorithm
 
 creating an array of pointers with new operator{
 	Node **A;
 	A = new Node*[n];
 }
 ascii value of 0 -> 48
 to convert Big to Small  + 32				(Ascii)A =>65 
 to convert small to big  - 32				(Ascii)a =>97
 to convert integer in string to number/digit  	   S-48
 to find the length of the string S.length()
 
 
 char = tolower(char)
 isdigit()  -> #include <ctype.h>
 sort(pointer to starting of array, pointer to end) -> #include <algorithm>
 
function to copy an array : 
	 std::copy(std::begin(a), std::end(a), std::begin(b));
	 
	 
// to find the lexicographically next permutation
 #include<algorithms>
 int myints[] = {1,2,3};
  do {
    std::cout << myints[0] << ' ' << myints[1] << ' ' << myints[2] << '\n';
  } while ( std::next_permutation(myints,myints+3) );
//

// To check two arrays for equality :
#include <algorithm> 
int a[m]
int b[m]
equal(a,a+m,m)//


// finding max element in the array 
max_element(a,a+m); // Returns a pointer to the element

// Getting the index of the value in an array 
    int *m = min_element(h,h+n);
    pos = m-h;


// VECTOR
#include<vector>
vector <int> v;
* v.size() -> Returns vector current size;
* v.empty() -> bool function 
* v.push_back(value) -> inserts value at the end of the vector array
* v.resize(new_size) -> resizes the vector 
* v.clear() -> clears the array.
* initializing the vector -> vector <int> v(size,value)
* initializing a two dimentional matrix -> vector < vector <int> > v(N,vector <int> (M,value))


// pairs
#include <utility>
pair <int,int> a[i];
a[i].first
a[i].second 

// to see if a number is present in the array or not
itn a[n];
if(find(a,a+n,x)!= a+n) cout << "FOUND";
else false;

//sort function for pair example:
true means don't swap
bool sortdes(const pair<int,int> &a,const pair<int,int> &b){
    if(a.first >b.first)return true;
    else if(a.first == b.first && a.second < b.second)return true;
    else return false;
}

// Modulo operator :
(a/b)*b + a%b = a

if c = a%b;
then c = (b*k +a)%b where k = (0,1,2,3,.................)


// converting a string to integer 
#include <sstream>
ll StringToInteger(string NumberAsString){
	ll NumberAsInteger;
	stringstream ss;
	ss << NumberAsString;
	ss >> NumberAsInteger;
	return NumberAsInteger;
}

// converting an integer to string :
compiler :: -std = c++1z
#include<string>
string s = to_string(integer);

 // Removing ith character from the string s
 s.erase(s.begin()+i);
 i--;
 
 
 
 // calculating combinations (for small ranges)
int fact(int n){
    if(n==0) return 1;
    if (n>0) return n*fact(n-1);
};

int NCR(int n,int r){
    if(n==r) return 1;
    if (r==0&&n!=0) return 1;
	else return fact(n)/(fact(r)*fact(n-r));;
};

// Is prime function :
bool
 isPrime(ll n){
    if(n == 2)return true;
    ll i;
    FOR(i,2,sqrt(n)+1,1){
        if(n%i ==0){
            return false;
        }
    }
    return true;
}

// Fibonacci function with sieve :
vi fib_sieve (3,-1);

ll fibonacci(ll i){
    if(fib_sieve[i] != -1) return fib_sieve[i];
    else{
        return fibonacci(i-1)+fibonacci(i-2);
    }
}


// Function to reverse a string :

reverse(result.begin(),result.end());


// for printing a 2d Matrix

void printMatrix(int *M,int a,int b){
	cout << endl <<endl;
	REP(i,a){
		REP(j,b){
			cout << *((M+i*a)+j) << " ";
		}
		cout << endl;
	}
} 

printMatrix((int*)M,n+1,W+1);


// using stack in stl 

#include <stack>
stack <data_type> stack_name;
.push(x)
.pop()
.empty()
.top()


initialising an array : fill_n(dist,n,InF);
#include <algorithm>


string toBinary(int n)
{
    string r;
    while(n!=0) {r=(n%2==0 ?"0":"1")+r; n/=2;}
    return r;
}

int BinaryS (int l[],int left,int right,int x){
    if(left<= right){
        int mid = (left+right)/2;
        if(x>l[mid]) return findPos(l,left,mid-1,x);
        else return findPos(l,mid+1,right,x);
    }
    return right;
}

// USING SET 
set <int> s;
s.insert(x);
s.size()

//
fill_n(v,n,x);



// COUNTING THE NUMBER OF ELEMENTS IN UNION OF TWO SETS  
** ALL THE SETS SHOULD BE SORTED 

template <typename T>
class CountingPushBack{
  public:
        using value_type = T;
        void push_back(T const &) {++count;}
        size_t get_count() const {return count;}
  private:
        size_t count = 0;
};

CountingPushBack<int> cp;
set_union(s[i].begin(), s[i].end(), s[j].begin(), s[j].end(),back_inserter(cp));